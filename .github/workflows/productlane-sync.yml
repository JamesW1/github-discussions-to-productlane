name: Sync Discussion to ProductLane

# Trigger on discussion events
on:
  discussion:
    types: [created, edited, answered]
  discussion_comment:
    types: [created, edited]

jobs:
  sync-to-productlane:
    # Only run for specific discussion categories (customize as needed)
    if: github.event.discussion.category.name == 'Feature Requests'
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get current discussion upvotes
      id: get_upvotes
      run: |
        # Fetch current discussion data to get up-to-date upvote count
        DISCUSSION_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/discussions/${{ github.event.discussion.number }}")
        
        # Extract upvote count (thumbs up reactions on the main discussion post)
        CURRENT_UPVOTES=$(echo "$DISCUSSION_DATA" | jq '.upvote_count // 0')
        
        echo "CURRENT_UPVOTES=$CURRENT_UPVOTES" >> $GITHUB_ENV
        echo "Current discussion upvotes: $CURRENT_UPVOTES"

    - name: Prepare ProductLane payload
      id: prepare
      run: |
        # Extract basic discussion details
        DISCUSSION_TITLE="${{ github.event.discussion.title }}"
        DISCUSSION_URL="${{ github.event.discussion.html_url }}"
        DISCUSSION_CATEGORY="${{ github.event.discussion.category.name }}"
        ACTION_TYPE="${{ github.event.action }}"
        
        # Determine content and author based on event type
        if [[ "${{ github.event_name }}" == "discussion" ]]; then
          # This is a discussion event (created, edited, answered)
          CONTENT="${{ github.event.discussion.body }}"
          AUTHOR="${{ github.event.discussion.user.login }}"
          
          if [[ "$ACTION_TYPE" == "created" ]]; then
            EVENT_DESCRIPTION="New discussion created"
            TITLE_PREFIX="[NEW] "
          elif [[ "$ACTION_TYPE" == "edited" ]]; then
            EVENT_DESCRIPTION="Discussion post edited"
            TITLE_PREFIX="[EDITED] "
          elif [[ "$ACTION_TYPE" == "answered" ]]; then
            EVENT_DESCRIPTION="Discussion answered"
            TITLE_PREFIX="[ANSWERED] "
          fi
          
        elif [[ "${{ github.event_name }}" == "discussion_comment" ]]; then
          # This is a comment event (created, edited)
          CONTENT="${{ github.event.comment.body }}"
          AUTHOR="${{ github.event.comment.user.login }}"
          COMMENT_URL="${{ github.event.comment.html_url }}"
          
          if [[ "$ACTION_TYPE" == "created" ]]; then
            EVENT_DESCRIPTION="New comment added"
            TITLE_PREFIX="[COMMENT] "
          elif [[ "$ACTION_TYPE" == "edited" ]]; then
            EVENT_DESCRIPTION="Comment edited"
            TITLE_PREFIX="[COMMENT EDITED] "
          fi
          
          # For comments, use the comment URL instead of discussion URL
          DISCUSSION_URL="$COMMENT_URL"
        fi
        
        # Create JSON payload for ProductLane insights API
        # Add current upvote info to the content
        if [[ "$CURRENT_UPVOTES" -gt 0 ]]; then
          CONTENT_WITH_VOTES="${CONTENT}\n\n---\n👍 Discussion upvotes: ${CURRENT_UPVOTES}"
        else
          CONTENT_WITH_VOTES="${CONTENT}"
        fi
        
        cat > payload.json << EOF
        {
          "title": "${TITLE_PREFIX}${DISCUSSION_TITLE} (👍 ${CURRENT_UPVOTES})",
          "text": "${CONTENT_WITH_VOTES}",
          "painLevel": "UNKNOWN",
          "origin": "API_KEY_USER",
          "contactEmail": "${AUTHOR}@github.local",
          "contactName": "${AUTHOR}",
          "notify": {
            "slack": true,
            "email": false
          }
        }
        EOF
        
        echo "Payload prepared for: ${EVENT_DESCRIPTION}"
        echo "Content source: ${{ github.event_name }}"
        cat payload.json
    
    - name: Send to ProductLane
      run: |
        # ProductLane insights API endpoint
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.PRODUCTLANE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d @payload.json \
          "https://productlane.com/api/v1/insights" \
          --fail-with-body \
          --show-error
    
    - name: Log success
      run: |
        echo "✅ Successfully synced discussion to ProductLane"
        echo "Discussion: ${{ github.event.discussion.title }}"
        echo "Action: ${{ github.event.action }}"
        echo "URL: ${{ github.event.discussion.html_url }}"

    # Optional: Comment back on the discussion to confirm sync
    - name: Add sync confirmation comment
      if: github.event.action == 'created'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.discussions.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            discussion_number: context.payload.discussion.number,
            body: '🔄 This discussion has been automatically synced to ProductLane for tracking.'
          });
